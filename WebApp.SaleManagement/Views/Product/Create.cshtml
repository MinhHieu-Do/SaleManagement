@model WebApp.SaleManagement.Models.Product
@{
    ViewData["Title"] = "New Products";

}
<script src="~/ckeditor5/ckeditor.js"></script>
<div class="row modal-header">

    <div class="col-md-11">
        <h3 class="page-title text-primary">Create Product</h3>
    </div>
    <a asp-action="Index" class="btn btn-outline-primary" type="button">Back to List</a>

</div>
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <form enctype="multipart/form-data" asp-controller="Product" asp-action="Create" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="row form-row">
                        <div class="col-12 col-sm-6">
                            <div class="form-group">
                                <label>Product Name</label>
                                <input type="text" class="form-control" asp-for="ProductName">
                                <span asp-validation-for="ProductName" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6">
                            <div class="form-group">
                                <label>Price</label>
                                <input type="number" min="1" class="form-control" asp-for="Price">
                                <span asp-validation-for="Price" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6">
                            <div class="form-group">
                                <label>Quantity</label>
                                <input type="number" min="0" class="form-control" asp-for="Quantity">
                                <span asp-validation-for="Quantity" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label>Product Image</label>

                                <input type="file" asp-for="ImageFile" onchange=""
                                       class="form-control">
                            </div>
                        </div>
                        <div class="col-12 col-sm-6">
                            <div class="form-group row">

                                <img alt="Product image" class="col-12 col-sm-6" id="productImage" />
                            </div>
                        </div>
                        <div class="col-12 col-sm-6">
                            <div class="form-group">
                                <label>Category</label>
                                <select asp-for="CategoryId" class="form-control" asp-items="@ViewBag.Categories">
                                    <option>Choose Category</option>
                                </select>
                                <span asp-validation-for="CategoryId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6">
                            <div class="form-group">
                                <label>Brand</label>
                                <select asp-for="BrandId" class="form-control" asp-items="@ViewBag.Brands">
                                    <option>Choose Brand</option>
                                </select>
                                <span asp-validation-for="BrandId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-12 col-sm-12">
                            <div class="form-group">
                                <label>Description:</label>
                                <textarea asp-for="ProductDesc" id="description" class="form-control" placeholder="Enter message"></textarea>
                                <span asp-validation-for="ProductDesc" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary btn-block">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }
        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '@Url.Action("UploadImage","Product")', true);
            xhr.responseType = 'json';
        }
        

        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }
        // Prepares the data and sends the request.
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }
    }
    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }
    ClassicEditor.create(document.querySelector("#description"), {
        extraPlugins: [MyCustomUploadAdapterPlugin],
    })
        .then(editor => {
            window.editor = editor;
        })
        .catch(err => {
            console.error(err.stack);
        })
</script>

